// Generated by CoffeeScript 1.10.0
(function() {
  var FlatObject, Hash, QueryString,
    slice = [].slice;

  FlatObject = (function() {
    var index;

    function FlatObject() {}

    FlatObject.flatten = function(obj) {
      var flatten, result;
      flatten = function(object, flat_key) {
        var i, index, item, key, len, value;
        switch (Object.prototype.toString.call(object)) {
          case "[object Object]":
            for (key in object) {
              value = object[key];
              flatten(value, flat_key ? flat_key + "." + key : key);
            }
            break;
          case "[object Array]":
            for (index = i = 0, len = object.length; i < len; index = ++i) {
              item = object[index];
              flatten(item, flat_key + "[" + index + "]");
            }
            break;
          default:
            result[flat_key] = object;
        }
      };
      result = {};
      flatten(obj, "");
      return result;
    };

    FlatObject.expand = function(obj) {
      var flat_key, key, keys, namespace, target, value;
      namespace = [];
      for (flat_key in obj) {
        value = obj[flat_key];
        keys = flat_key.match(/((?!\[\d+\])[^.])+|\[\d+\]/g);
        target = namespace;
        key = 0;
        while (keys.length) {
          if (target[key] == null) {
            target[key] = keys[0] === index(keys[0]) ? {} : [];
          }
          target = target[key];
          key = index(keys.shift());
        }
        target[key] = value;
      }
      return namespace[0];
    };

    index = function(str) {
      var match;
      if (match = str.match(/^\[(\d+)\]$/)) {
        return Number(match[1]);
      } else {
        return str;
      }
    };

    return FlatObject;

  })();

  QueryString = (function() {
    function QueryString() {}

    QueryString.stringify = function(obj) {
      var key, results, value;
      results = [];
      for (key in obj) {
        value = obj[key];
        results.push((encodeURIComponent(key)) + "=" + (value != null ? encodeURIComponent(value) : ""));
      }
      return results.join("&");
    };

    QueryString.parse = function(str) {
      var i, key, len, obj, pair, ref, ref1, value;
      obj = {};
      ref = str.split("&");
      for (i = 0, len = ref.length; i < len; i++) {
        pair = ref[i];
        if (!(pair !== "")) {
          continue;
        }
        ref1 = pair.split("="), key = ref1[0], value = 2 <= ref1.length ? slice.call(ref1, 1) : [];
        if (key !== "") {
          obj[decodeURIComponent(key)] = decodeURIComponent(value.join("="));
        }
      }
      return obj;
    };

    return QueryString;

  })();

  Hash = (function() {
    function Hash() {}

    Hash.encode = function(data) {
      return "#" + QueryString.stringify(FlatObject.flatten(data));
    };

    Hash.decode = function(data) {
      if (data == null) {
        data = document.location.hash;
      }
      return (FlatObject.expand(QueryString.parse(data.replace(/^#/, "")))) || {};
    };

    return Hash;

  })();

}).call(this);
