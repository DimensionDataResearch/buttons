window = @
document = window.document
CONFIG_API          = "https://api.github.com"
CONFIG_ANCHOR_CLASS = "dimensiondata-button"
CONFIG_ICON_CLASS   = "octicon"
CONFIG_ICON_DEFAULT = "#{CONFIG_ICON_CLASS}-cloud-upload"
CONFIG_URL          = if document.currentScript then document.currentScript.src.replace /[^/]*([?#].*)?$/, "" else "#{if /^http:/.test document.location then "http" else "https"}://dimensiondataresearch.github.io/buttons/"
CONFIG_UUID         = "faa75404-3b97-5585-b449-4bc51338fbd1"
class FlatObject
  @flatten: (obj) ->
    flatten = (object, flat_key) ->
      switch Object::toString.call object
        when "[object Object]"
          for key, value of object
            flatten value, if flat_key then "#{flat_key}.#{key}" else key
        when "[object Array]"
          for item, index in object
            flatten item, "#{flat_key}[#{index}]"
        else
          result[flat_key] = object
      return
    result = {}
    flatten obj, ""
    result

  @expand: (obj) ->
    namespace = []
    for flat_key, value of obj
      keys = flat_key.match /((?!\[\d+\])[^.])+|\[\d+\]/g
      target = namespace
      key = 0
      while keys.length
        unless target[key]?
          target[key] = if keys[0] is index keys[0] then {} else []
        target = target[key]
        key = index keys.shift()
      target[key] = value
    namespace[0]

  index = (str) ->
    if match = str.match /^\[(\d+)\]$/
      Number match[1]
    else
      str


class QueryString
  @stringify: (obj) ->
    results = []
    for key, value of obj
      results.push "#{encodeURIComponent key}=#{if value? then encodeURIComponent value else ""}"
    results.join "&"

  @parse: (str) ->
    obj = {}
    for pair in str.split "&" when pair isnt ""
      [key, value...] = pair.split "="
      obj[decodeURIComponent key] = decodeURIComponent value.join "=" if key isnt ""
    obj


class Hash
  @encode: (data) ->
    "#" + QueryString.stringify FlatObject.flatten data

  @decode: (data = document.location.hash) ->
    (FlatObject.expand QueryString.parse data.replace /^#/, "") or {}
class EventTarget
  constructor: (@$) ->

  on: (events..., func) ->
    callback = (event) =>
      func.call @, event || window.event
    addEventListener @$, eventName, callback for eventName in events
    return

  once: (events..., func) ->
    callback = (event) =>
      removeEventListener @$, eventName, callback for eventName in events
      func.call @, event || window.event
    addEventListener @$, eventName, callback for eventName in events
    return

  addEventListener = (element, event, func) ->
    if element.addEventListener
      element.addEventListener "#{event}", func
    else
      element.attachEvent "on#{event}", func
    return

  removeEventListener = (element, event, func) ->
    if element.removeEventListener
      element.removeEventListener "#{event}", func
    else
      element.detachEvent "on#{event}", func
    return


class Element extends EventTarget
  constructor: (element, callback) ->
    @$ = if element and element.nodeType is 1 then element else document.createElement element
    callback.call @, @$ if callback

  addClass: (className) ->
    addClass @$, className unless hasClass @$, className
    return

  removeClass: (className) ->
    removeClass @$, className if hasClass @$, className
    return

  hasClass: (className) ->
    hasClass @$, className

  addClass = (element, className) ->
    element.className += " #{className}"
    return

  removeClass = (element, className) ->
    element.className = " #{element.className} "
      .replace r_whitespace, " "
      .replace " #{className} ", ""
      .replace /^ | $/, ""
    return

  hasClass = (element, className) ->
    " #{element.className} ".replace(r_whitespace, " ").indexOf(" #{className} ") >= 0

  r_whitespace = /[ \t\n\f\r]+/g


class Frame extends Element
  constructor: (callback) ->
    super "iframe", (iframe) ->
      iframe.setAttribute key, value for key, value of {
        allowtransparency: true
        scrolling: "no"
        frameBorder: 0
      }
      iframe.style.cssText = "width: 1px; height: 0; border: none"
      iframe.src = "javascript:0"
      callback.call @, iframe if callback
      return

  html: (html) ->
    try
      contentDocument = @$.contentWindow.document
      contentDocument.open().write html
      contentDocument.close()
    return

  load: (src) ->
    @$.src = src
    return

  size: ->
    try
      contentDocument = @$.contentWindow.document
      html = contentDocument.documentElement
      body = contentDocument.body
      width = html.scrollWidth
      height = html.scrollHeight
      if body.getBoundingClientRect
        body.style.display = "inline-block"
        boundingClientRect = body.getBoundingClientRect()
        width = Math.max width, roundPixel boundingClientRect.width or boundingClientRect.right - boundingClientRect.left
        height = Math.max height, roundPixel boundingClientRect.height or boundingClientRect.bottom - boundingClientRect.top
        body.style.display = ""

      width: "#{width}px"
      height: "#{height}px"

  resize: ({width, height} = @size() or {}) ->
    @$.style.width = width if width
    @$.style.height = height if height
    return

  devicePixelRatio = window.devicePixelRatio or 1

  roundPixel = (px) ->
    if devicePixelRatio > 1
      Math.ceil(Math.round(px * devicePixelRatio) / devicePixelRatio * 2) / 2 or 0
    else
      Math.ceil(px) or 0


class ButtonAnchor
  @parse: (element) ->
    href: element.href
    text: element.getAttribute("data-text") or element.textContent or element.innerText or ""
    data:
      count:
        api: element.getAttribute("data-count-api") or ""
        href: element.getAttribute("data-count-href") or element.href
        aria:
          label: element.getAttribute("data-count-aria-label") or ""
      style: element.getAttribute("data-style") or ""
      icon: element.getAttribute("data-icon") or ""
    aria:
      label: element.getAttribute("aria-label") or ""


class ButtonFrame extends Frame
  constructor: (hash, beforeload, callback) ->
    super beforeload

    reload = =>
      reload = null
      size = @size()
      @$.parentNode.removeChild @$
      @once "load", ->
        @resize size
        return
      @load "#{CONFIG_URL}buttons.html#{hash}"
      callback.call @, @$ if callback
      return

    @once "load", ->
      if jsonp_callback = @$.contentWindow.callback
        new Element jsonp_callback.script, (script) ->
          @on "load", "error", ->
            reload() if reload
            return

          if script.readyState
            @on "readystatechange", ->
              reload() if not /i/.test(script.readyState) and reload
              return
          return
      else
        reload()
      return

    @html \
      """
      <!DOCTYPE html><html><head><meta charset="utf-8"><title>#{CONFIG_UUID}</title><link rel="stylesheet" href="#{CONFIG_URL}assets/css/buttons.css"><script>document.location.hash = "#{hash}";</script></head><body><script src="#{CONFIG_URL}buttons.js"></script></body></html>
      """


class ButtonFrameContent
  constructor: (options) ->
    if options and options.data
      document.body.className = options.data.style or ""

      new Anchor options.href, null, (a) ->
        a.className = "button"
        a.setAttribute "aria-label", options.aria.label if options.aria.label
        new Element "i", (icon) ->
          icon.className = options.data.icon or CONFIG_ICON_DEFAULT
          @addClass CONFIG_ICON_CLASS if CONFIG_ICON_CLASS
          icon.setAttribute "aria-hidden", "true"
          a.appendChild icon
          return

        a.appendChild document.createTextNode " "

        new Element "span", (text) ->
          text.appendChild document.createTextNode options.text if options.text
          a.appendChild text
          return
        document.body.appendChild a
        return

      do (options = options.data.count, baseUrl = options.href) ->
        if options and options.api
          new Anchor options.href, baseUrl, (a) ->
            a.className = "count"
            new Element "b", (b) ->
              a.appendChild b
              return
            new Element "i", (i) ->
              a.appendChild i
              return
            new Element "span", (span) ->
              a.appendChild span

              endpoint = do ->
                url = options.api.replace(/^(?!\/)/, "/").split("#")[0]
                query = QueryString.parse url.split("?")[1..].join("?")
                query.callback = "callback"
                "#{url.split("?")[0]}?#{QueryString.stringify query}"

              new Element "script", (script) ->
                script.async = true
                script.src = "#{CONFIG_API}#{endpoint}"

                window.callback = (json) ->
                  window.callback = null

                  if json.meta.status is 200
                    data = FlatObject.flatten(json.data)[options.api.split("#")[1..].join("#")]
                    if "[object Number]" is Object::toString.call data
                      data = "#{data}".replace /\B(?=(\d{3})+(?!\d))/g, ","
                    span.appendChild document.createTextNode data
                    a.setAttribute "aria-label", options.aria.label.replace "#", data if options.aria.label
                    document.body.appendChild a
                  return
                window.callback.script = script

                @on "error", ->
                  window.callback = null
                  return

                if script.readyState
                  @on "readystatechange", ->
                    window.callback = null if script.readyState is "loaded" and script.children and script.readyState is "loading"
                    return

                head = document.getElementsByTagName("head")[0]

                if "[object Opera]" is Object::toString.call window.opera
                  new EventTarget document
                    .on "DOMContentLoaded", ->
                      head.appendChild script
                      return
                else
                  head.appendChild script

                return
              return
            return
        return


  class Anchor extends Element
    constructor: (urlString, baseURLstring, callback) ->
      super "a", (a) ->
        if base
          if (a.href = baseURLstring) and a.protocol isnt javascript
            try
              a.href = new URL(urlString, baseURLstring).href
            catch
              base.href = baseURLstring
              a.href = urlString
              new Element "div", (div) ->
                div.innerHTML = a.outerHTML
                a.href = div.lastChild.href
                div = null
                return
              base.href = document.location.href
              base.removeAttribute "href"
          else
            a.href = urlString
          if r_archive.test a.href
            a.target = "_top"
          if a.protocol is javascript or not r_hostname.test ".#{a.hostname}"
            a.href = "#"
            a.target = "_self"
        callback a
        return

    base = document.getElementsByTagName("base")[0]
    javascript = "javascript:"
    r_hostname = /\.github\.com$/
    r_archive = ///
      ^https?://(
        (gist\.)?github\.com/[^/]+/[^/]+/archive/ |
        github\.com/[^/]+/[^/]+/releases/download/ |
        codeload\.github\.com/
      )
    ///
class Deferred
  constructor: (func) ->
    if /m/.test(document.readyState) or (!/g/.test(document.readyState) and !document.documentElement.doScroll)
      window.setTimeout func
    else
      if document.addEventListener
        new EventTarget document
          .once "DOMContentLoaded", func
      else
        callback = ->
          if /m/.test document.readyState
            document.detachEvent "onreadystatechange", callback
            func() if func
          return
        document.attachEvent "onreadystatechange", callback
class GitHubAPIStatus
  @low_rate_limit = false

  window.callback = (json) =>
    @rate_limit = json.data
    @low_rate_limit = @rate_limit.resources.core.remaining < 16
    return

  @update: ->
    unless window.callback.script
      new Element "script", (script) ->
        script.async = true
        script.src = "https://api.github.com/rate_limit?callback=callback"
        window.callback.script = script
        @on "readystatechange", "load", "error", ->
          if !script.readyState or /loaded|complete/.test script.readyState
            script.parentNode.removeChild script
            window.callback.script = null
          return
        head = document.getElementsByTagName("head")[0]
        head.insertBefore script, head.firstChild
        return
    return

  @update()


class Form extends Element
  on: (events..., func) ->
    if events.indexOf("change") >= 0
      callback = (event) =>
        func.call @, event || window.event
      for element in @$.elements
        new Element element
          .on "change", "input", callback
    super

  serialize: ->
    data = {}
    for node in @$.elements when node.name
      switch node.type
        when "radio", "checkbox"
          data[node.name] = node.value if node.checked
        else
          data[node.name] = node.value
    data


class PreviewAnchor extends Element
  constructor: ({href, text, data, aria}, callback) ->
    super "a", (a) ->
      a.className = CONFIG_ANCHOR_CLASS
      a.href = href
      a.appendChild document.createTextNode "#{text}"
      a.setAttribute "data-#{name}", value for name, value of data
      a.setAttribute "aria-#{name}", value for name, value of aria
      callback a if callback
      return


class PreviewFrame extends Frame
  constructor: (preview) ->
    super (iframe) ->
      preview.appendChild iframe
      iframe.src = "buttons.html"
      return
    @on "load", ->
      if callback = @$.contentWindow.callback
        script = callback.script
        if script.readyState
          new Element script
            .on "readystatechange", ->
              @resize() if /loaded|complete/.test script.readyState
              return
        else
          new Element script
            .on "load", "error", ->
              @resize()
              return
      else
        @resize()
      return

  load: (config) ->
    parentNode = @$.parentNode
    parentNode.removeChild @$
    parentNode.style.height = "#{(if config.data.style is "mega" then 28 else 20) + 2}px"

    @$.style.width = "1px"
    @$.style.height = "0"
    @$.src = "buttons.html#{Hash.encode config}"

    parentNode.appendChild @$
    return


class Code extends Element
  constructor: ->
    super
    @on "focus", ->
      @$.select()
      return
    @on "click", ->
      @$.select()
      return
    @on "mouseup", (event) ->
      event.preventDefault()
      false


class ButtonForm extends Form
  constructor: (@$, {content, preview: {button, frame, code, warning}, snippet, user_repo}) ->
    @$.setAttribute key, value for key, value of {
      autocapitalize: "none"
      autocomplete: "off"
      autocorrect: "off"
      spellcheck: "false"
    }

    snippet.$.value = \
      """
      <!-- Place this tag in your head or just before your close body tag. -->
      <script async defer src="https://buttons.github.io/buttons.js"></script>
      """

    callback = ({force}) =>
      options = @serialize()

      if options.type
        content.removeClass "hidden"

        for name in ["repo", "standard-icon"]
          @$.elements[name].disabled = options.type is "follow"
        for name in ["show-count"]
          @$.elements[name].disabled = options.type is "download"

        unless (!options.user or validate_user options.user) and (options.type is "follow" or !options.repo or validate_repo options.repo)
          user_repo.addClass "has-error"
        else
          user_repo.removeClass "has-error"
          if options.user is "" or (options.type isnt "follow" and options.repo is "")
            user_repo.addClass "has-warning"
          else
            user_repo.removeClass "has-warning"

        if (user_repo.hasClass "has-error") or (user_repo.hasClass "has-warning")
          options.user = "ntkme"
          options.repo = "github-buttons"

        if @cache isnt (cache = Hash.encode options) or force
          @cache = cache
          new PreviewAnchor @parse(options), (a) =>
            code.$.value = \
              """
              <!-- Place this tag where you want the button to render. -->
              #{a.outerHTML}
              """

            button.addClass "hidden"
            if options["show-count"]? and options.type isnt "download"
              GitHubAPIStatus.update()
              if GitHubAPIStatus.low_rate_limit
                button.removeClass "hidden"
                reset = new Date GitHubAPIStatus.rate_limit.resources.core.reset * 1000
                if !@reset or reset > @reset
                  @reset = reset
                  warning.removeClass "hidden"
                if force
                  warning.addClass "hidden"
                else
                  a.removeAttribute "data-count-api"

            frame.load ButtonAnchor.parse a
            a = null
            return
      return

    button.on "click", (event) ->
      event.preventDefault()
      callback force: true
      false
    @on "change", callback

  parse: (options = @serialize()) ->
    {type, user, repo} = options
    config =
      className: "github-button"
      href:
        switch type
          when "follow"
            "https://github.com/#{user}"
          when "watch", "star"
            "https://github.com/#{user}/#{repo}"
          when "fork"
            "https://github.com/#{user}/#{repo}/fork"
          when "issue"
            "https://github.com/#{user}/#{repo}/issues"
          when "download"
            "https://github.com/#{user}/#{repo}/archive/master.zip"
          else
            "https://github.com/"
      text:
        switch type
          when "follow"
            "Follow @#{user}"
          else
            type.charAt(0).toUpperCase() + type[1..].toLowerCase()
      data:
        icon:
          switch type
            when "watch"
              "octicon-eye"
            when "star"
              "octicon-star"
            when "fork"
              "octicon-repo-forked"
            when "issue"
              "octicon-issue-opened"
            when "download"
              "octicon-cloud-download"
            else
              "octicon-mark-github"
      aria:
        label:
          switch type
            when "follow"
              "Follow @#{user} on GitHub"
            when "watch", "star", "fork", "issue", "download"
              "#{type.charAt(0).toUpperCase() + type[1..].toLowerCase()} #{user}/#{repo} on GitHub"
            else
              "GitHub"
    if options["large-button"]?
      config.data.style = "mega"
    if options["show-count"]?
      switch type
        when "follow"
          config.data["count-href"] = "/#{user}/followers"
          config.data["count-api"] = "/users/#{user}#followers"
          config.data["count-aria-label"] = "# followers on GitHub"
        when "watch"
          config.data["count-href"] = "/#{user}/#{repo}/watchers"
          config.data["count-api"] = "/repos/#{user}/#{repo}#subscribers_count"
          config.data["count-aria-label"] = "# watchers on GitHub"
        when "star"
          config.data["count-href"] = "/#{user}/#{repo}/stargazers"
          config.data["count-api"] = "/repos/#{user}/#{repo}#stargazers_count"
          config.data["count-aria-label"] = "# stargazers on GitHub"
        when "fork"
          config.data["count-href"] = "/#{user}/#{repo}/network"
          config.data["count-api"] = "/repos/#{user}/#{repo}#forks_count"
          config.data["count-aria-label"] = "# forks on GitHub"
        when "issue"
          config.data["count-api"] = "/repos/#{user}/#{repo}#open_issues_count"
          config.data["count-aria-label"] = "# issues on GitHub"
    if options["standard-icon"]? or config.data.icon is "octicon-mark-github"
      delete config.data.icon
    config

  validate_user = (user) ->
    0 < user.length < 40 and not /[^A-Za-z0-9-]|^-|-$|--/i.test user

  validate_repo = (repo) ->
    0 < repo.length < 101 and not /[^\w-.]|\.git$|^\.\.?$/i.test repo


new Deferred ->
  new ButtonForm document.getElementById("button-config"),
    content: new Element document.getElementById "content"
    user_repo: new Element document.getElementById "user-repo"
    preview:
      button: new Element document.getElementById "preview-button"
      frame: new PreviewFrame document.getElementById "preview"
      code: new Code document.getElementById "code"
      warning: new Element document.getElementById "preview-warning"
    snippet: new Code document.getElementById "snippet"
  return

@onbeforeunload = ->
